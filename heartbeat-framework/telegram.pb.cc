// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telegram.proto

#include "telegram.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_telegram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataCollection_telegram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telegram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerStatusDatas_telegram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telegram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransActionData_telegram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telegram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TransData_telegram_2eproto;
class TransActionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransActionData> _instance;
} _TransActionData_default_instance_;
class ServerStatusDatasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerStatusDatas> _instance;
} _ServerStatusDatas_default_instance_;
class DataCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataCollection> _instance;
} _DataCollection_default_instance_;
class TransDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransData> _instance;
  const ::TransActionData* trans_action_data_;
  const ::ServerStatusDatas* server_status_datas_;
  const ::DataCollection* data_collection_;
} _TransData_default_instance_;
class TelegramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Telegram> _instance;
} _Telegram_default_instance_;
static void InitDefaultsscc_info_DataCollection_telegram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DataCollection_default_instance_;
    new (ptr) ::DataCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DataCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataCollection_telegram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataCollection_telegram_2eproto}, {}};

static void InitDefaultsscc_info_ServerStatusDatas_telegram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServerStatusDatas_default_instance_;
    new (ptr) ::ServerStatusDatas();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerStatusDatas::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerStatusDatas_telegram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerStatusDatas_telegram_2eproto}, {}};

static void InitDefaultsscc_info_Telegram_telegram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Telegram_default_instance_;
    new (ptr) ::Telegram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Telegram::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Telegram_telegram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Telegram_telegram_2eproto}, {
      &scc_info_TransData_telegram_2eproto.base,}};

static void InitDefaultsscc_info_TransActionData_telegram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransActionData_default_instance_;
    new (ptr) ::TransActionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransActionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransActionData_telegram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransActionData_telegram_2eproto}, {}};

static void InitDefaultsscc_info_TransData_telegram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransData_default_instance_;
    new (ptr) ::TransData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TransData_telegram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TransData_telegram_2eproto}, {
      &scc_info_TransActionData_telegram_2eproto.base,
      &scc_info_ServerStatusDatas_telegram_2eproto.base,
      &scc_info_DataCollection_telegram_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_telegram_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_telegram_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_telegram_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_telegram_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransActionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransActionData, type_),
  PROTOBUF_FIELD_OFFSET(::TransActionData, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerStatusDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerStatusDatas, server_status_),
  PROTOBUF_FIELD_OFFSET(::ServerStatusDatas, have_virtual_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DataCollection, size_),
  PROTOBUF_FIELD_OFFSET(::DataCollection, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TransData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransData, type_),
  PROTOBUF_FIELD_OFFSET(::TransData, size_),
  offsetof(::TransDataDefaultTypeInternal, trans_action_data_),
  offsetof(::TransDataDefaultTypeInternal, server_status_datas_),
  offsetof(::TransDataDefaultTypeInternal, data_collection_),
  PROTOBUF_FIELD_OFFSET(::TransData, data_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Telegram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Telegram, version_),
  PROTOBUF_FIELD_OFFSET(::Telegram, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TransActionData)},
  { 7, -1, sizeof(::ServerStatusDatas)},
  { 14, -1, sizeof(::DataCollection)},
  { 21, -1, sizeof(::TransData)},
  { 32, -1, sizeof(::Telegram)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransActionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServerStatusDatas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DataCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Telegram_default_instance_),
};

const char descriptor_table_protodef_telegram_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016telegram.proto\"<\n\017TransActionData\022\031\n\004t"
  "ype\030\001 \001(\0162\013.ActionType\022\016\n\006result\030\002 \001(\010\"C"
  "\n\021ServerStatusDatas\022\025\n\rserver_status\030\001 \001"
  "(\010\022\027\n\017have_virtual_ip\030\002 \001(\010\",\n\016DataColle"
  "ction\022\014\n\004size\030\001 \001(\005\022\014\n\004data\030\002 \001(\t\"\317\001\n\tTr"
  "ansData\022\030\n\004type\030\001 \001(\0162\n.TransType\022\014\n\004siz"
  "e\030\002 \001(\005\022-\n\021trans_action_data\030\003 \001(\0132\020.Tra"
  "nsActionDataH\000\0221\n\023server_status_datas\030\004 "
  "\001(\0132\022.ServerStatusDatasH\000\022*\n\017data_collec"
  "tion\030\005 \001(\0132\017.DataCollectionH\000B\014\n\ndata_on"
  "eof\"5\n\010Telegram\022\017\n\007version\030\001 \001(\t\022\030\n\004data"
  "\030\002 \001(\0132\n.TransData*\206\001\n\tTransType\022\r\n\tHEAR"
  "TBEAT\020\000\022\n\n\006ACTION\020\001\022\025\n\021GET_SERVER_STATUS"
  "\020\002\022\014\n\010GET_DATA\020\003\022\020\n\014REPLY_ACTION\020\004\022\027\n\023RE"
  "PLY_SERVER_STATUS\020\005\022\016\n\nREPLY_DATA\020\006*C\n\nA"
  "ctionType\022\013\n\007GET_RES\020\000\022\013\n\007GOT_RES\020\001\022\014\n\010F"
  "REE_RES\020\002\022\r\n\tFREED_RES\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_telegram_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_telegram_2eproto_sccs[5] = {
  &scc_info_DataCollection_telegram_2eproto.base,
  &scc_info_ServerStatusDatas_telegram_2eproto.base,
  &scc_info_Telegram_telegram_2eproto.base,
  &scc_info_TransActionData_telegram_2eproto.base,
  &scc_info_TransData_telegram_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_telegram_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_telegram_2eproto = {
  false, false, descriptor_table_protodef_telegram_2eproto, "telegram.proto", 672,
  &descriptor_table_telegram_2eproto_once, descriptor_table_telegram_2eproto_sccs, descriptor_table_telegram_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_telegram_2eproto::offsets,
  file_level_metadata_telegram_2eproto, 5, file_level_enum_descriptors_telegram_2eproto, file_level_service_descriptors_telegram_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_telegram_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_telegram_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telegram_2eproto);
  return file_level_enum_descriptors_telegram_2eproto[0];
}
bool TransType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telegram_2eproto);
  return file_level_enum_descriptors_telegram_2eproto[1];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TransActionData::InitAsDefaultInstance() {
}
class TransActionData::_Internal {
 public:
};

TransActionData::TransActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TransActionData)
}
TransActionData::TransActionData(const TransActionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&type_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:TransActionData)
}

void TransActionData::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&type_)) + sizeof(result_));
}

TransActionData::~TransActionData() {
  // @@protoc_insertion_point(destructor:TransActionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransActionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransActionData::ArenaDtor(void* object) {
  TransActionData* _this = reinterpret_cast< TransActionData* >(object);
  (void)_this;
}
void TransActionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransActionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransActionData& TransActionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransActionData_telegram_2eproto.base);
  return *internal_default_instance();
}


void TransActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:TransActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&type_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransActionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ActionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ActionType>(val));
        } else goto handle_unusual;
        continue;
      // bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransActionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ActionType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bool result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransActionData)
  return target;
}

size_t TransActionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransActionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ActionType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool result = 2;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransActionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransActionData)
  GOOGLE_DCHECK_NE(&from, this);
  const TransActionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransActionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransActionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransActionData)
    MergeFrom(*source);
  }
}

void TransActionData::MergeFrom(const TransActionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransActionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void TransActionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransActionData::CopyFrom(const TransActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransActionData::IsInitialized() const {
  return true;
}

void TransActionData::InternalSwap(TransActionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransActionData, result_)
      + sizeof(TransActionData::result_)
      - PROTOBUF_FIELD_OFFSET(TransActionData, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransActionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerStatusDatas::InitAsDefaultInstance() {
}
class ServerStatusDatas::_Internal {
 public:
};

ServerStatusDatas::ServerStatusDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerStatusDatas)
}
ServerStatusDatas::ServerStatusDatas(const ServerStatusDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_status_, &from.server_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&have_virtual_ip_) -
    reinterpret_cast<char*>(&server_status_)) + sizeof(have_virtual_ip_));
  // @@protoc_insertion_point(copy_constructor:ServerStatusDatas)
}

void ServerStatusDatas::SharedCtor() {
  ::memset(&server_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&have_virtual_ip_) -
      reinterpret_cast<char*>(&server_status_)) + sizeof(have_virtual_ip_));
}

ServerStatusDatas::~ServerStatusDatas() {
  // @@protoc_insertion_point(destructor:ServerStatusDatas)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerStatusDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerStatusDatas::ArenaDtor(void* object) {
  ServerStatusDatas* _this = reinterpret_cast< ServerStatusDatas* >(object);
  (void)_this;
}
void ServerStatusDatas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerStatusDatas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerStatusDatas& ServerStatusDatas::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerStatusDatas_telegram_2eproto.base);
  return *internal_default_instance();
}


void ServerStatusDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerStatusDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&have_virtual_ip_) -
      reinterpret_cast<char*>(&server_status_)) + sizeof(have_virtual_ip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerStatusDatas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool server_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool have_virtual_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          have_virtual_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerStatusDatas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerStatusDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool server_status = 1;
  if (this->server_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_server_status(), target);
  }

  // bool have_virtual_ip = 2;
  if (this->have_virtual_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_have_virtual_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerStatusDatas)
  return target;
}

size_t ServerStatusDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerStatusDatas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool server_status = 1;
  if (this->server_status() != 0) {
    total_size += 1 + 1;
  }

  // bool have_virtual_ip = 2;
  if (this->have_virtual_ip() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerStatusDatas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerStatusDatas)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerStatusDatas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerStatusDatas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerStatusDatas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerStatusDatas)
    MergeFrom(*source);
  }
}

void ServerStatusDatas::MergeFrom(const ServerStatusDatas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerStatusDatas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_status() != 0) {
    _internal_set_server_status(from._internal_server_status());
  }
  if (from.have_virtual_ip() != 0) {
    _internal_set_have_virtual_ip(from._internal_have_virtual_ip());
  }
}

void ServerStatusDatas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerStatusDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatusDatas::CopyFrom(const ServerStatusDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerStatusDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatusDatas::IsInitialized() const {
  return true;
}

void ServerStatusDatas::InternalSwap(ServerStatusDatas* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerStatusDatas, have_virtual_ip_)
      + sizeof(ServerStatusDatas::have_virtual_ip_)
      - PROTOBUF_FIELD_OFFSET(ServerStatusDatas, server_status_)>(
          reinterpret_cast<char*>(&server_status_),
          reinterpret_cast<char*>(&other->server_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerStatusDatas::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataCollection::InitAsDefaultInstance() {
}
class DataCollection::_Internal {
 public:
};

DataCollection::DataCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DataCollection)
}
DataCollection::DataCollection(const DataCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:DataCollection)
}

void DataCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataCollection_telegram_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
}

DataCollection::~DataCollection() {
  // @@protoc_insertion_point(destructor:DataCollection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataCollection::ArenaDtor(void* object) {
  DataCollection* _this = reinterpret_cast< DataCollection* >(object);
  (void)_this;
}
void DataCollection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataCollection& DataCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataCollection_telegram_2eproto.base);
  return *internal_default_instance();
}


void DataCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:DataCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DataCollection.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataCollection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_size(), target);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataCollection.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCollection)
  return target;
}

size_t DataCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // int32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const DataCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataCollection)
    MergeFrom(*source);
  }
}

void DataCollection::MergeFrom(const DataCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void DataCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataCollection::CopyFrom(const DataCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCollection::IsInitialized() const {
  return true;
}

void DataCollection::InternalSwap(DataCollection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransData::InitAsDefaultInstance() {
  ::_TransData_default_instance_.trans_action_data_ = const_cast< ::TransActionData*>(
      ::TransActionData::internal_default_instance());
  ::_TransData_default_instance_.server_status_datas_ = const_cast< ::ServerStatusDatas*>(
      ::ServerStatusDatas::internal_default_instance());
  ::_TransData_default_instance_.data_collection_ = const_cast< ::DataCollection*>(
      ::DataCollection::internal_default_instance());
}
class TransData::_Internal {
 public:
  static const ::TransActionData& trans_action_data(const TransData* msg);
  static const ::ServerStatusDatas& server_status_datas(const TransData* msg);
  static const ::DataCollection& data_collection(const TransData* msg);
};

const ::TransActionData&
TransData::_Internal::trans_action_data(const TransData* msg) {
  return *msg->data_oneof_.trans_action_data_;
}
const ::ServerStatusDatas&
TransData::_Internal::server_status_datas(const TransData* msg) {
  return *msg->data_oneof_.server_status_datas_;
}
const ::DataCollection&
TransData::_Internal::data_collection(const TransData* msg) {
  return *msg->data_oneof_.data_collection_;
}
void TransData::set_allocated_trans_action_data(::TransActionData* trans_action_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data_oneof();
  if (trans_action_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trans_action_data);
    if (message_arena != submessage_arena) {
      trans_action_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trans_action_data, submessage_arena);
    }
    set_has_trans_action_data();
    data_oneof_.trans_action_data_ = trans_action_data;
  }
  // @@protoc_insertion_point(field_set_allocated:TransData.trans_action_data)
}
void TransData::set_allocated_server_status_datas(::ServerStatusDatas* server_status_datas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data_oneof();
  if (server_status_datas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(server_status_datas);
    if (message_arena != submessage_arena) {
      server_status_datas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_status_datas, submessage_arena);
    }
    set_has_server_status_datas();
    data_oneof_.server_status_datas_ = server_status_datas;
  }
  // @@protoc_insertion_point(field_set_allocated:TransData.server_status_datas)
}
void TransData::set_allocated_data_collection(::DataCollection* data_collection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data_oneof();
  if (data_collection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data_collection);
    if (message_arena != submessage_arena) {
      data_collection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_collection, submessage_arena);
    }
    set_has_data_collection();
    data_oneof_.data_collection_ = data_collection;
  }
  // @@protoc_insertion_point(field_set_allocated:TransData.data_collection)
}
TransData::TransData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TransData)
}
TransData::TransData(const TransData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&type_)) + sizeof(size_));
  clear_has_data_oneof();
  switch (from.data_oneof_case()) {
    case kTransActionData: {
      _internal_mutable_trans_action_data()->::TransActionData::MergeFrom(from._internal_trans_action_data());
      break;
    }
    case kServerStatusDatas: {
      _internal_mutable_server_status_datas()->::ServerStatusDatas::MergeFrom(from._internal_server_status_datas());
      break;
    }
    case kDataCollection: {
      _internal_mutable_data_collection()->::DataCollection::MergeFrom(from._internal_data_collection());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TransData)
}

void TransData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransData_telegram_2eproto.base);
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(size_));
  clear_has_data_oneof();
}

TransData::~TransData() {
  // @@protoc_insertion_point(destructor:TransData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data_oneof()) {
    clear_data_oneof();
  }
}

void TransData::ArenaDtor(void* object) {
  TransData* _this = reinterpret_cast< TransData* >(object);
  (void)_this;
}
void TransData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransData& TransData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransData_telegram_2eproto.base);
  return *internal_default_instance();
}


void TransData::clear_data_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TransData)
  switch (data_oneof_case()) {
    case kTransActionData: {
      if (GetArena() == nullptr) {
        delete data_oneof_.trans_action_data_;
      }
      break;
    }
    case kServerStatusDatas: {
      if (GetArena() == nullptr) {
        delete data_oneof_.server_status_datas_;
      }
      break;
    }
    case kDataCollection: {
      if (GetArena() == nullptr) {
        delete data_oneof_.data_collection_;
      }
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}


void TransData::Clear() {
// @@protoc_insertion_point(message_clear_start:TransData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(size_));
  clear_data_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TransType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::TransType>(val));
        } else goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransActionData trans_action_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trans_action_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerStatusDatas server_status_datas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_status_datas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataCollection data_collection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_collection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TransType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  // .TransActionData trans_action_data = 3;
  if (_internal_has_trans_action_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trans_action_data(this), target, stream);
  }

  // .ServerStatusDatas server_status_datas = 4;
  if (_internal_has_server_status_datas()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::server_status_datas(this), target, stream);
  }

  // .DataCollection data_collection = 5;
  if (_internal_has_data_collection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::data_collection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransData)
  return target;
}

size_t TransData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TransType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  switch (data_oneof_case()) {
    // .TransActionData trans_action_data = 3;
    case kTransActionData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_oneof_.trans_action_data_);
      break;
    }
    // .ServerStatusDatas server_status_datas = 4;
    case kServerStatusDatas: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_oneof_.server_status_datas_);
      break;
    }
    // .DataCollection data_collection = 5;
    case kDataCollection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_oneof_.data_collection_);
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransData)
  GOOGLE_DCHECK_NE(&from, this);
  const TransData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransData)
    MergeFrom(*source);
  }
}

void TransData::MergeFrom(const TransData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  switch (from.data_oneof_case()) {
    case kTransActionData: {
      _internal_mutable_trans_action_data()->::TransActionData::MergeFrom(from._internal_trans_action_data());
      break;
    }
    case kServerStatusDatas: {
      _internal_mutable_server_status_datas()->::ServerStatusDatas::MergeFrom(from._internal_server_status_datas());
      break;
    }
    case kDataCollection: {
      _internal_mutable_data_collection()->::DataCollection::MergeFrom(from._internal_data_collection());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
}

void TransData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransData::CopyFrom(const TransData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransData::IsInitialized() const {
  return true;
}

void TransData::InternalSwap(TransData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransData, size_)
      + sizeof(TransData::size_)
      - PROTOBUF_FIELD_OFFSET(TransData, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
  swap(data_oneof_, other->data_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Telegram::InitAsDefaultInstance() {
  ::_Telegram_default_instance_._instance.get_mutable()->data_ = const_cast< ::TransData*>(
      ::TransData::internal_default_instance());
}
class Telegram::_Internal {
 public:
  static const ::TransData& data(const Telegram* msg);
};

const ::TransData&
Telegram::_Internal::data(const Telegram* msg) {
  return *msg->data_;
}
Telegram::Telegram(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Telegram)
}
Telegram::Telegram(const Telegram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::TransData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Telegram)
}

void Telegram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Telegram_telegram_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

Telegram::~Telegram() {
  // @@protoc_insertion_point(destructor:Telegram)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Telegram::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void Telegram::ArenaDtor(void* object) {
  Telegram* _this = reinterpret_cast< Telegram* >(object);
  (void)_this;
}
void Telegram::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Telegram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Telegram& Telegram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Telegram_telegram_2eproto.base);
  return *internal_default_instance();
}


void Telegram::Clear() {
// @@protoc_insertion_point(message_clear_start:Telegram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Telegram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Telegram.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Telegram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Telegram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Telegram.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // .TransData data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Telegram)
  return target;
}

size_t Telegram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Telegram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .TransData data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Telegram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Telegram)
  GOOGLE_DCHECK_NE(&from, this);
  const Telegram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Telegram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Telegram)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Telegram)
    MergeFrom(*source);
  }
}

void Telegram::MergeFrom(const Telegram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Telegram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::TransData::MergeFrom(from._internal_data());
  }
}

void Telegram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Telegram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telegram::CopyFrom(const Telegram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Telegram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telegram::IsInitialized() const {
  return true;
}

void Telegram::InternalSwap(Telegram* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Telegram::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TransActionData* Arena::CreateMaybeMessage< ::TransActionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransActionData >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerStatusDatas* Arena::CreateMaybeMessage< ::ServerStatusDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerStatusDatas >(arena);
}
template<> PROTOBUF_NOINLINE ::DataCollection* Arena::CreateMaybeMessage< ::DataCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::TransData* Arena::CreateMaybeMessage< ::TransData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransData >(arena);
}
template<> PROTOBUF_NOINLINE ::Telegram* Arena::CreateMaybeMessage< ::Telegram >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Telegram >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
